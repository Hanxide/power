<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 加载jdbc属性文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">

        <property name="driverClassName" value="${mysql.driver}"/>
        <property name="url" value="${power.mysql.url}"/>
        <property name="username" value="${power.mysql.username}"/>
        <property name="password" value="${power.mysql.password}"/>

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="20"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="200"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="20"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000"/>

        <property name="validationQuery">
            <value>SELECT 1</value>
        </property>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="testWhileIdle" value="true"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000"/>

        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
        <!-- 解密密码必须要配置的项 -->
        <property name="filters" value="config" />
        <property name="connectionProperties" value="config.decrypt=true" />
    </bean>

    <!-- 配置druid监控spring jdbc -->
    <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>
    <!-- 方法名正则匹配拦截配置 -->
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>com.user.*.service.*</value>
            </list>
        </property>
    </bean>
    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>
    </aop:config>

    <!-- 数据库选择 -->
    <bean id="vendorProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="SQL Server">sqlserver</prop>
                <prop key="DB2">db2</prop>
                <prop key="Oracle">oracle</prop>
                <prop key="MySQL">mysql</prop>
            </props>
        </property>
    </bean>

    <bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
        <property name="properties" ref="vendorProperties"/>
    </bean>

    <!-- enable component scanning (beware that this does not enable mapper scanning!) -->
    <context:component-scan base-package="com.user.**.service">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="facadeMonitoringAdvisor" class="net.bull.javamelody.MonitoringSpringAdvisor">
        <property name="pointcut">
            <bean class="org.springframework.aop.support.JdkRegexpMethodPointcut">
                <property name="pattern" value="com.user.*.service.*"/>
                <!--正则表达式-->
            </bean>
        </property>
    </bean>

    <!-- enable autowire -->
    <context:annotation-config/>

    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven/>

    <!-- 事务 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" rollback-for="CustomException" propagation="REQUIRED" timeout="10"/>
            <tx:method name="save*" rollback-for="CustomException" propagation="REQUIRED" timeout="10"/>
            <tx:method name="edit*" rollback-for="CustomException" propagation="REQUIRED" timeout="10"/>
            <tx:method name="remove*" rollback-for="CustomException" propagation="REQUIRED" timeout="10"/>
            <tx:method name="insert*" rollback-for="CustomException" propagation="REQUIRED" timeout="10"/>
            <tx:method name="update*" rollback-for="CustomException" propagation="REQUIRED" timeout="10"/>
            <tx:method name="del*" rollback-for="CustomException" propagation="REQUIRED" timeout="10"/>
            <tx:method name="accept*" rollback-for="CustomException" propagation="REQUIRED" timeout="10"/>
            <tx:method name="begin*" rollback-for="CustomException" propagation="REQUIRED" timeout="10"/>
            <tx:method name="end*" rollback-for="CustomException" propagation="REQUIRED" timeout="10"/>
            <tx:method name="rec*" rollback-for="CustomException" propagation="REQUIRED" timeout="10"/>
            <tx:method name="create*" rollback-for="CustomException" propagation="REQUIRED" timeout="10"/>
            <tx:method name="register*" rollback-for="CustomException" propagation="REQUIRED" timeout="10"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- define the SqlSessionFactory -->
    <!-- sqlSessionFactory 产生实例 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 对应我们的实体类所在的包，这个时候会自动取对应包中不包括包名的简单类名作为包括包名的别名 -->
        <property name="typeAliasesPackage" value="com.user.**.domain"/>
        <!-- 实现多个数据库之间的切换 -->
        <property name="databaseIdProvider" ref="databaseIdProvider"/>
        <!-- 用来指定配置路径 -->
       <!-- <property name="configLocation" value="classpath:configuration.xml"/>-->
        <!-- mybatis 的分页插件 -->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            <!-- 分页合理化 -->
                            reasonable=true
                            <!-- 是否支持接口参数来传递分页参数，默认false -->
                            supportMethodsArguments=true
                            params=count=countSql
                        </value>
                    </property>
                </bean>
                <bean class="com.user.power.framework.util.mybatis.CameHumpInterceptor2">

                </bean>
            </array>
        </property>
    </bean>

    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.user.**.persistence"/>
        <!-- 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类 -->
        <property name="properties">
            <value>
                mappers=com.user.power.framework.util.mybatis.mapper.AllBaseMapper
            </value>
        </property>
    </bean>
</beans>